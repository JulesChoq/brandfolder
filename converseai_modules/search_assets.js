/**
 * @file search_assets.js
 * @description Searches Brandfolder Assets by tags 
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status          = require('@converseai/plugins-sdk').Status;
const ModuleResponse  = require('@converseai/plugins-sdk').Payloads.Module.ModuleResponse;
const request         = require('request-promise');

module.exports = function search_assets (app, body) {

  /** @type {String} token Brandfolder API Token  and org_id */
  const {token,org_id} = body.payload.registrationData;

  /** @type {String} tags Tags to search for (can accept array, csv 
  * or string)   */
  var tags = body.payload.moduleParam.tags;
  if(tags.includes('[')){
    tags = tags.replace(/\[/g,'').replace(/\]/g,'');
  }

  if(typeof tags==='object'){
    tags=tags.join()
  }

  if (token != undefined && org_id != undefined) { 
    /** @type {ModuleResponse} response The Converse AI response to respond with. */
    var response = new ModuleResponse();
    const options = {
      url:`https://brandfolder.com/api/v4/organizations/${org_id}/assets`,
      headers:{
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
      qs: {
        search: tags,
        fields: 'cdn_url',
        include: 'brandfolder,section,collections,attachments,tags,custom_fields'
      },
      json: true
    }
    request.get(options).then(result=> {

        response.setValue(result);
        app.send(Status.SUCCESS, response);
        }).catch(err=>{
          console.error(err)
          app.fail({ httpStatus: err.statusCode, message: err.error.errors}); 
        })
  } else { 
    app.fail({ httpStatus: 400, code: 'REQUIRED_PARAMS_UNDEFINED', description: 'Required parameters are undefined.' }); 
  }
};

/**
 * @file get_attachments.js
 * @description Gets the attachments for an asset in Brandfolder. 
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status          = require('@converseai/plugins-sdk').Status;
const ModuleResponse  = require('@converseai/plugins-sdk').Payloads.Module.ModuleResponse;
const request         = require('request-promise');


module.exports = function get_attachments (app, body) {
  /** @type {String} token Brandfolder API Token  */
  var token = body.payload.registrationData.token;

  /** @type {String} brandfolderId ID for a brandfolder  */
  var brandfolderId = body.payload.registrationData.brandfolder_id;

  /** @type {String} orgId OrgID  */
  var orgId = body.payload.registrationData.org_id;


  /** @type {String} asset The asset ID for which we will fetch the 
  * attachments.  */
  var asset = body.payload.moduleParam.asset;

  if (token != undefined && brandfolderId != undefined && orgId != undefined && asset != undefined) { 
    /** @type {ModuleResponse} response The Converse AI response to respond with. */
    var response = new ModuleResponse();
  const options = {
    url:`https://brandfolder.com/api/v4/assets/${asset}/attachments`,
    headers:{
      Authorization: `Bearer ${token}`,
      'Content-Type': 'application/json',
    },
    json: true,
  }

  request.get(options).then(result=> {
    response.setValue(result);
    app.send(Status.SUCCESS, response);
  }).catch(err=>{
    console.error(err)
    app.fail({ httpStatus: err.statusCode, message: err.error.errors}); 
  })
  } else { 
    app.fail({ httpStatus: 400, code: 'REQUIRED_PARAMS_UNDEFINED', description: 'Required parameters are undefined.' }); 
  }
};
